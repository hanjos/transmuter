#summary Some usage examples.
#labels Featured,Phase-Use

Obs.: check the ProjectGlossary fo the specific terminology used here.

= Example =

== Getting converters ==

There are several ways of creating converters. One option readily offered by Transmuter is using the [http://transmuter.googlecode.com/svn/tags/transmuter-0.1/docs/apidocs/com/googlecode/transmuter/Converts.html @Converts] annotation.

To use it, create a class with all intended converter methods marked with it:

{{{
public class SomeConverter {
  // the parameter type is the input type: here, that's Date
  // the return type is the output type: here, that's String
  @Converts
  public String dateToString(java.util.Date date) {
    // code 
  }

  // converts a String to a Date
  @Converts
  public java.util.Date stringToDate(String string) {
    // more code
  }

  // not an converter method
  public Object willNotBeRegistered(List<String> whatever) {
    // yet even more code
  }
}
}}}

== Registering the converters in the transmuter ==

Use a provider to `register` an instance of the class in the transmuter.
A provider is any object or method which will return the converters to register (actually an [http://download.oracle.com/javase/6/docs/api/java/lang/Iterable.html Iterable] of converters). In this case, Transmuter has some providers for use with `@Converts`:

{{{
// in some method...
SomeConverter someConverter = new SomeConverter();
transmuter.register(new Converts.EagerProvider(someConverter));
}}}

The transmuter will iterate through the instance's methods and register all the converter methods found, binding them to the instance.

== Doing a conversion ==

Just call `convert`:

{{{
// in some method...
String string = "";

// all these calls do the same thing
// converts a Date object to a String
string = transmuter.convert(new java.sql.Date(0L), String.class);
string = transmuter.convert(new java.sql.Date(0L), TypeToken.STRING);

// converts a java.sql.Date object, which is seen as a 
// java.util.Date in this conversion, to a String
string = transmuter.convert(new java.sql.Date(0L), java.util.Date.class, String.class);
string = transmuter.convert(new java.sql.Date(0L), TypeToken.get(java.util.Date.class), TypeToken.STRING);
}}}

The `convert` calls above are the same as:

{{{
// it's the same someConverter created in the register example!
string = someConverter.dateToString(new java.sql.Date(0L));
}}}