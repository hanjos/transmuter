#summary Future features planned for, well, whenever.
#labels Featured,Phase-Design

= Introduction =

This page is a brain dump for future features, refactorings, TODOs and stuff which may be implemented sometime. Dunno which version, when, or if they'll ever make it in...


= Stuff =
== For today ==

  * Generalize the `register` operation for the programmer to be able to say how to obtain the bindings. 

  * Exception instantiation is an expensive operation due to the stack trace filling, which isn't needed when we're just queueing 'em up for later throwage.
    * Filling the stack trace can be avoided only by overwriting the {{{fillInStackTrace}}} method.

== For tomorrow ==

  * Implement some search algorithm for a most compatible converter if a perfect match isn't found. Parameterizing it seems good...

  * Transitive conversion, e.g. if I have a String -> Unit converter and a Unit -> int converter, I can translate a String to an int. This will affect the most compatible converter algorithm mentioned above (or will it _be_ an alternative algorithm?).

  * Parameterize what should happen when a non-public method is marked with @Converts. It could be ignored (silent bugs suck) or an exception can be thrown (extra effort needed just to signal errors). 

=== Current future parameters ===

  * Compatible converter search algorithm injection.

  * Give `register` a binding provider (`ConverterProvider`? Sounds so... enterprise-y :)

  * Invalid converter detection.

== To think about ==

  * Make the API more Spring-friendly (a setConverters method or something like that, so that a transmuter can be instantiated and set up from Spring).

  * Make ValueType a real enum. We lose the generics, but is it really all that useful?

  * Rethink the validation process (especially for ConverterType and Binding) to ease inheritance. Maybe the ability to register validators with some pre-implemented ones (could end up being a separate mini-project).
    * On registering validators: too much work, and too much code. Would be easier on the eyes with some AOP, but it doesn't seem worth the bother.
    * Did some refactoring, it looks reasonable for now.

  * Investigate a better workaround (is there any?) for [http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4819108 bug 4819108] in the JVM.

  * Accept more than one converter for the same type? How to distinguish them? Yet another parameter (for Transmuter)?
    * Best left for later.

  * Use something like Apache Commons instead of some homebrew util classes.
    * Will do if more utility methods show up.

  * A Converter interface. (A lot) Less checking needed, but not sure how a Converter implementation with @Converts methods will work. Does just marking the Converter method with @Converts do the trick (I think so)?
    * Is this really necessary? It is less... "magical", so to speak, although annotations are getting popular enough so that "regular folk" won't get too confused...
  
  * If lots of optional parameters show up (got a few already!), a DSL would be cool.