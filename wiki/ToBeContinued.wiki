#summary Future features planned for, well, whenever.
#labels Featured

= Introduction =

This page is a brain dump for future features, refactorings, TODOs and stuff which may be implemented sometime. Dunno which version, when, or if they'll ever make it in...


= Stuff =
== Refactorings ==

  * Put Pair and Binding in a different package; they're not just util classes.

  * Finish the docs.

  * Make the interface more Spring-friendly.


== To think about ==

  * Rethink the validation process (especially for Pair and Binding) to ease inheritability. Maybe the ability to register validators with some pre-implemented ones (could end up being a separate mini-project).

  * Investigate a better workaround (is there any?) for [http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4819108 bug 4819108] in the JVM.

  * Figure out what should happen when a non-public method is marked with @Converts. Should it be ignored (silent bugs suck) or should an exception be thrown (extra effort needed to check them just to signal errors). Methinks a new parameter has just shown itself :)

  * Accept more than one converter for the same type? How to distinguish them? Yet another parameter (for Transmuter)?


== New stuff to implement! ==

  * A Converter interface. (A lot) Less checking needed, but not sure how a Converter implementation with @Converts methods will work. Does just marking the Converter method with @Converts do the trick (I think so)?
  
  * Implement some search algorithm for a most compatible converter if a perfect match isn't found. Parameterizing it seems good...

  * Transitive conversion (work on the name needed), e.g. if I have a String -> Unit converter and a Unit -> int converter, I can translate a String to an int. This will affect the most compatible converter algorithm mentioned above (or will it _be_ an alternative algorithm?).

  * If lots of optional parameters show up (got three potential ones already!), a DSL would be cool.